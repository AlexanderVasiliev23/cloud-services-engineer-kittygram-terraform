name: Deploy

on:
  push:
    branches:
      - main

jobs:
  create-server:
    runs-on: ubuntu-latest
    outputs:
      server_ip: ${{ steps.terraform-apply.outputs.server_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.11.4"

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init -backend-config="access_key=${{ secrets.TERRAFORM_ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.TERRAFORM_SECRET_KEY }}"

      - name: Terraform Apply (Create Server)
        id: terraform-apply
        working-directory: ./infra
        run: |
          terraform apply -auto-approve
          
          echo $(terraform output -raw vm_public_ip)
          
#          IP=$(echo "$JSON_OUTPUT" | jq -r '.vm_public_ip.value')
          
#          terraform output -raw vm_public_ip > ip.txt
#          IP=$(head -n 1 ip.txt | awk '{print $1}')
#
#          cat ip.txt
#
#          rm ip.txt
#
#          echo "server_ip=$IP" >> $GITHUB_OUTPUT

#          RAW_OUTPUT=$(terraform output -raw vm_public_ip)
#
#          echo $RAW_OUTPUT
#
#          IP=$(echo "$RAW_OUTPUT" | awk -F'::' '{print $1}')
#
#          echo "server_ip=$IP" >> $GITHUB_OUTPUT
#          echo "Extracted IP: $IP"

#          JSON_OUTPUT=$(terraform output -json)
#
#          echo $JSON_OUTPUT
#
#          IP=$(echo "$JSON_OUTPUT" | jq -r '.vm_public_ip.value')
#
#          echo $IP
#

          
#          IP=$(terraform output -raw vm_public_ip)
          
#          echo $IP
          
#          IP=$(jq -r '.vm_public_ip.value' outputs.json)
#          echo "server_ip=$IP" >> $GITHUB_OUTPUT
        env:
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          YC_TOKEN: ${{ secrets.YC_TOKEN }}

      - name: Update tests.yml with new server IP
        run: |
          sed -i "s|http://[0-9.]\+:[0-9]\+|http://${{ steps.terraform-apply.outputs.server_ip }}:80|g" tests.yml
          echo "File tests.yml updated:"
          cat tests.yml

  pep8:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0

      - name: Test with flake8
        run: python -m flake8 backend/

  build-and-push-backend-image:
    runs-on: ubuntu-latest
    needs: pep8
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest

  build-and-push-frontend-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest

  build-and-push-gateway-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-backend-image
      - build-and-push-frontend-image
      - build-and-push-gateway-image
      - create-server
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ needs.create-server.outputs.server_ip }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"

      - name: Create .env file
        run: |
          touch .env
          echo "POSTGRES_HOST=postgres" > .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env

      - name: Copy .env via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ needs.create-server.outputs.server_ip }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          source: ".env"
          target: "kittygram"

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.create-server.outputs.server_ip }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          script: |
            cd kittygram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d

  autotests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./backend/requirements.txt

      - name: Run autotests
        run: pytest

  telegram-notification:
    runs-on: ubuntu-latest
    needs: autotests
    steps:
      - name: Send Telegram Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ –£—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä!
            –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
            –í–µ—Ç–∫–∞: ${{ github.ref }}
            –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
            –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.
            üì¶ –ö–æ–¥ –∑–∞–¥–µ–ø–ª–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.